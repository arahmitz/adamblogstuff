[{"content":"","date":"15 February 2024","permalink":"/adamblogstuff/tags/beginner/","section":"Tags","summary":"","title":"beginner"},{"content":"","date":"15 February 2024","permalink":"/adamblogstuff/tags/blender/","section":"Tags","summary":"","title":"blender"},{"content":"","date":"15 February 2024","permalink":"/adamblogstuff/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"15 February 2024","permalink":"/adamblogstuff/tags/rigging/","section":"Tags","summary":"","title":"rigging"},{"content":"","date":"15 February 2024","permalink":"/adamblogstuff/series/rigging-for-beginner-animation/","section":"Series","summary":"","title":"Rigging for beginner animation"},{"content":"","date":"15 February 2024","permalink":"/adamblogstuff/series/","section":"Series","summary":"","title":"Series"},{"content":"Rigging the squash \u0026amp; stretch ball in blender # 0. Foreword # In this article you\u0026rsquo;ll learn:\nHow to rig a ball in blender How to create armatures and move them to snap bones in place How to use Bone Widget to create controls How to make clean layers in rig Basics of preparing rig for usage by other people 1. Preparation # As far as rigging in blender goes, we\u0026rsquo;re start by downloading the project files and Bone Widget.\nAttention: due to lack of rigging nodes (as of day of writing this post), we\u0026rsquo;ll need to do little hacking in the controllers hierarchy, that I\u0026rsquo;ll try to avoid later in the series, I\u0026rsquo;ll let you know where and why it happens.\nThe files are prepared for version 4.0, I am going to utilise new bone collections, so this part will look different if you\u0026rsquo;re on the old version of blender. 2. Armature and Skinning # After you start up your project file, it should look like this: View after opening the file First of all, we are going to create an armature in the proper axis. That\u0026rsquo;s why we\u0026rsquo;are going to click NUM3 to make our camera allign, making our left side the front, and our right side the back. We can add the Armature by clicking SHIFT + A and selecting Armature that\u0026rsquo;ll be created in the middle of the bar. Of course we can\u0026rsquo;t see it, so we can navigate to the right side, and by selecting Armature Data\u0026gt;Viewport Display we are going to enable\nNames - This option shows bone names, it\u0026rsquo;ll help us in defining bones on screen, without having to look all the time at the outliner. Shapes - It\u0026rsquo;ll let us look at controls later Bone Colors - It\u0026rsquo;ll let us change controller colors later In Front - It\u0026rsquo;ll render bones always in front, super useful for aligning stuff. Axes - It\u0026rsquo;s important for understanding our rotations. Armature Data in outliner With selected armature, we can change the mode to Edit by using Tab (It\u0026rsquo;s not a basic setting, go to Preferences \u0026gt; Keymap and select Tab for Pie Menu, it\u0026rsquo;ll make things faster later) Mode Select Pie Menu While in Edit Mode with the bone selected, I am going to use F2 to fast-change name of the bone to root - as I\u0026rsquo;ve explained it before, root always sits at the origin of the world, and thats where our root will sit too. Rename tool Now, in Edit Mode, we are going to select the Head of the bone, and by clicking SHIFT+S we\u0026rsquo;re going to choose Selection to Cursor. After that, by moving the head with G, I am going to clikc Y to lock axis and hit 1 to move it by 1m. Changing the root to world transform by using 3D Cursor Now that we know how to use 3D cursor, we are going to change the mesh origin point by first moving the 3D Cursor to Active, but in order to select the mesh, we need to use use TAB to get back to Object Mode. Changing the 3D Cursor to Ball Origin After we\u0026rsquo;ve done that, the next step is to create our only def bone, that we\u0026rsquo;ll call def_body. To do that, we are going to select the armature back, change to Edit Mode, then select it\u0026rsquo;s Tail and Extrude a bone after clicking Z to lock the axis as height. We are going to extrude it up to around the middle and rename the bone. Extruding a bone from root Clean outliner is your friend - rename things as early as possible to de-clutter things!\nAfter that, we are going to move the def_body bone to start in the middle of the ball by selecting the bone (make sure it\u0026rsquo;s not parented, if yours is, use ALT+P\u0026gt;Clear Parent) then by using SHIFT+S use Selection to Cursor. Your rig should look like this: Rig with proper deformation bone placed One super important thing for later is changing the rotation mode - with your bones selected in Pose mode use CTRL+R and select XYZ - we\u0026rsquo;ll touch it later! After that, we are going to bind the mesh to the bone in a process called skinning.\nTo do that, we are going to start by checking every bone in Bone Data tab of Properties to look if [ ] Deform is checked, we want our root to be unchecked while def_body should be checked.\nIn blender, bones with the prefix DEF are the only ones that should have deform checked, by doing that you\u0026rsquo;ll know which bones influence your mesh\nProperties of def_bone with Deform checked If all of these are checked (and believe me - it\u0026rsquo;s a good idea to get a habit of checking that before skinning the model), we can start skinning process. To do that, go back to your Object Mode, select your Mesh, then with SHIFT select your Armature and by using CTRL+P\u0026gt; Armature Deform - Automatic Weights. Skinning process with Automatic Weights You might ask yourself - why using automatic? Is it always the best? The answer is sadly no - automatic weights is almost never the answer. Only models consisting of one mesh (or many single meshes like mechanical stuff) is okay-ish, but I still suggest to use Empty Groups and select Vertex Groups (information which skin touch what) yourself, but that\u0026rsquo;s beyond scope of this tutorial. After that, we\u0026rsquo;re going to check if our skinning worked properly by going to select Armature, then in Pose Mode moving first root and then def_body and see if ball works properly. Note: I am resetting transforms fast by hitting ALT+R and ALT+G for rotation and transformation. Checking if skinning is working right, we\u0026rsquo;ll do it every time after skinning With that, we\u0026rsquo;ve done our first phase of making the ball rig in blender. Now, to keep you on your toes, please parent the def_body to root with offset., here\u0026rsquo;s the fast guide in spoiler if you\u0026rsquo;re not sure how to do it.\nClick to reveal Go to edit mode Select def_body, then shift-click root\nHit CTRL+P -\u0026gt; Parent With Offset\n3. Making Squash \u0026amp; Stretch mechanism # As I\u0026rsquo;ve talked about what\u0026rsquo;s the math behind the good squash and stretch ratio, blender comes with a pre-built constraint that is going to do the work for us. There are some advantages of this, although personally I\u0026rsquo;d prefer rigging nodes like in Maya.\nThe constraint I\u0026rsquo;m talking about is Stretch To that looks like this: Screenshot of Stretch To from blender docs As I am not a fan of explaining perfectly created documentation, here\u0026rsquo;s the link to Stretch To Constraint. I am going to touch things, that we\u0026rsquo;re really interested in:\nTarget - it\u0026rsquo;ll be the the \u0026ldquo;end\u0026rdquo; of our squash \u0026amp; stretch target Maintain Volume - it picks which axes should be affected to preserve the virtual volume stretching along Y axis. Let\u0026rsquo;s get back to our rig. We\u0026rsquo;ll start by creating our *stretch mechanism. To do that, we are going to copy our def_body bone, then select the tail and by resetting the 3D Cursor to World Origin move the tail to the new cursor position. But to do that, we are going to learn about Bone Collections.\nBone Collection Menu in Properties Tab You can think of Bone Collections like layers in any other software - in blender 4.0, developers actually revamped old system (which had 16 normal and 16 protected layers) and made them actually unlimited. By using + button, we are going to add some layers and make it look like this:\nI\u0026rsquo;ve added five different layers that we\u0026rsquo;re going to use for the whole tutorial The most important thing to understand here is that if we click a bone, and it has a dot near the name of the collection, then it\u0026rsquo;s a part of the collection - and we can hide/unhide them. Be careful - you cant parent/unparent to bones that are actively hidden!\nWe\u0026rsquo;re going to sort the bones we\u0026rsquo;ve created with the prefixes they added. Sorting out the bones to the right layers With that done, we can finally do the mch_stretch bone. Lets start with our sequence again: we are going to copy our def_body bone, then select the tail and by resetting the 3D Cursor to World Origin move the tail to the new cursor position. Stretching mch_stretch to it\u0026rsquo;s proper position Now, looking back to our control list, we need to add something, to control out stretch from both sides - to do that, we\u0026rsquo;re going to need two controls, but general cleaniness of rigging means that we are going to use target bones making our constraits separated between deformation skeleton that will follow our target skeleton (tgt and sometimes mch), that will follow control bones which animators are going to move. You can think of it as something similar to Maya\u0026rsquo;s offset groups which are used to make the controllers themselves at transform [0, 0, 0]. As always - we\u0026rsquo;re going to build habits that will make us better riggers in the future.\nWe are going to extrude two bones on Z axis, one from bottom and one from top of the mch_stretch, we\u0026rsquo;re also going to name them tgt_stretch-top and tgt_stretch-bottom and Clear Parent. Creating target bones for the stretch controlls, notice I am checking if the things separated properly Again, I am going to leave you some exercises. In the next step, we are going to assign proper bone collections and create a tgt_body and that will control def_body. Remember to uncheck deform! Besides that, we are going to copy tgt_body once more and call it tgt_cog\nAfter we\u0026rsquo;ve done that, we should end up with a hierarchy like this:\nroot def_body mch_stretch tgt_stretch-top tgt_stretch-bottom tgt_cog tgt_body Now, to explain how this ball\u0026rsquo;s mechanism will work, we are going to do two things:\nAdd stretchTo to mch_stretch parent things properly And then we\u0026rsquo;ll talk about why does it work like this.\nLet\u0026rsquo;s start by adding the constraint. To add them, we need to be in Pose Mode. You can add them by using SHIFT+CTRL+C or by going to Properties\u0026gt;Bone Constraints. We\u0026rsquo;re going to pick Armature as our target and tgt_stretch-top as our bone target. After that, we can check if it works properly. We could also shift-click our target bone \u0026gt; bone we add constraint to to automatically select it After that we\u0026rsquo;re going to parent our mechanism the proper way. Think of it that way:\nWe want to move everything by tgt_cog, meaning it should be at the top of the hierarchy After that, we want our stretchers, to follow the cog, so they should be children of cog We want our mch_stretch to stretch in both ways by moving either contoller and not move the other one, which means that stretch needs to be a children of one of them - because our stretch works with tgt_stretch-top we don\u0026rsquo;t need stretch to follow it, so we can freely make it a child of tgt_stretch-bottom We want to be able to keep rotation independent of the stretch, so it needs to happen after stretching - basically making the rotation happen AFTER, by making it a children We end up with a hierarchy like this\nroot def_body tgt_cog tgt_stretch-top tgt_stretch-bottom mch_stretch tgt_body While it might be hard to remember how Parent actually works, think that it\u0026rsquo;s always CHILDREN first being grabbed by PARENT at last 4. Controls # We don\u0026rsquo;t really want animators to touch our rig insides, so for the ease of all we are going to create controls for our rig - remember, we\u0026rsquo;re rigging for somebody else - so we need to make rigs in a way clear enough that other people understand it as well. Because of that, in this sub-section I am going to talk about some conventions.\nTo start, we need to make our mesh follow our target bones first. In this case, because we have only one deformation bone, it\u0026rsquo;ll be super easy and I am going to let you do it yourself!\nThe goal is to add a Copy Transforms constraint to def_body and select tgt_body as the target.\nIt should look like this, if you can\u0026rsquo;t select it - unhide def bone collection Now, we can look if every control works properly - we can disable all other bone collections\nA quick look if we can do everything even if we disable other bones than target ones After a check, we are ready to create controls! Remember to get Bone Widget for this step.\nWe\u0026rsquo;ll start by looking at different controls first and we are going to start with a root control. While in blender armature modifier creates a joint that we can use, it\u0026rsquo;s always a good idea to create a control for your root bone, that will let you do some tricks like progressive walks (adding motion to root bone to mimic what game engine does).\nThere are different shapes for root bones:\nVayne Rig by Matheus Lima @ artstation AZRI Rig by popular autor Jonathan Cooper, author of GameAnim: Video Games Explained Uncle Death Rig for blender by Crabnuts (@Kani_Natto_), blender rig controls are generally lighter and less saturated As you see, there are few popular shapes and I\u0026rsquo;m sure that you\u0026rsquo;ve encountered even more - but mostly they are circular (sometimes squared) with or without arrows. In Bone Widget, we have an option to add one of two (Root 1, Root 2), and for the Vayne-styled one, we are going to create \u0026ldquo;Root 1\u0026rdquo;.\nTo do that, first we need to create a copy bone of root and name it ctrl_root and add it to a proper bone collection. As controls are going to mimic our target bone hierarchy, you can leave it unattended under Armature.\nWe can easily leave it in hierarchy as we\u0026rsquo;ll mimic target one Next, we are going to do switch to Pose Mode and hit N, to open the sidebar. By picking Rig Tools, we open up Bone Widget and select Root 1 as the shape. Then we can click Create, to create the shape. After done that, I am going to give you a simple exercies - your task is to copy all target bones and rename them ctrl_* where * is the relative name. Remember, we don\u0026rsquo;t need to copy MCH one. After that, we can parent it to mimic tgt bone hierarchy.\nThat\u0026rsquo;s also where the hack I\u0026rsquo;ve been talking about happens - do not copy tgt_body, we\u0026rsquo;ll create a control from it (so you can move it to ctrl collection), because otherwise the rotation will break.\nRemember to add them to collections afterwards To get more clarity, we are going to add copy transforms from ctrl bones to tgt ones, this time doing it faster, by shift clicking one after another like this If you cant click the bone, you can always select it in outliner Let\u0026rsquo;s now think about our other controls. We\u0026rsquo;ll start by creating something for the ctrl_cog and tgt_body. A standad cog (and sometimes called hips) is some kind of a circle, and we\u0026rsquo;ll go with that, we are going to create a smaller circle for the rotation. When you add a shape, you can also change it\u0026rsquo;s shape by clicking Edit button, by doing that, I can easily re-size the controls.\nYou can notice, that I\u0026rsquo;ve forgotten to add tgt_body to the right collection before and it didn\u0026rsquo;t let me create shape because tgt was hidden Stretching controls can vary from rig to rig, but for the case of our rig, we are going to consider is as auxilary controls - which means that we need to create a shape, that\u0026rsquo;ll convey the idea behind what it does, so an animator can understand how to work with the rig. You can think of controls building kinda like designing UX for the animator - you want to use marker - things, that by form, shape or color will subconsciously give an idea on how to work with your designed thing (for more about markers in design, you can check The Design of Everyday Things by Donald Norman).\nFor my markers, I\u0026rsquo;ve chosen pyramids - they are pointy on one side, so they can lead the eye to the center of the ball naturally making animator think that if he translates the controller to the inside, something will happen.\nAs we\u0026rsquo;ve learned how to do it, you can add them yourself, at the end it should like this\nIf you select two bones, you can add the same shape at the same time! As you see, my pyramids are smaller and moved up, and you can achieve that either by using Edit, or by the menu that appears in the down left corner\nWhen you\u0026rsquo;ve experience enough rigs, you start to see that colors in rigging are usually the same no matter who creates them. While I was researching the history of them, I\u0026rsquo;ve established my own control scheme that I am going to pass down for you:\nLeft side controls are RED Right side controls are BLUE Middle side controls are GREEN Auxilary controls are YELLOW We can change our controls colors in Bone\u0026gt;Viewport Display. I usually change them to a custom color theme and use the button next to it, to copy them to other controlls (the object you are copying from is LAST), let\u0026rsquo;s try it by adding yellow color to rotation and stretch controllers. We\u0026rsquo;re going to select ctrl_stretch-top and add a custom color theme under their Viewport Display tab, set them up to YELLOW, and then by selecting rest of the control hit the double arrow button.\nBlender uses a specific setup where you give 3 colors - Regular / Select / Active As you know how to add controls, let\u0026rsquo;s wrap this up, by adding colors to the rest of controllers. You should end up with this:\nWe\u0026rsquo;ve almost done! 5. Clean up \u0026amp; final touches # So, we\u0026rsquo;ve finally created everything, we could start animating right away!\nWRONG! I\u0026rsquo;ve told you at the start that mess is going to be a pain in the ass, so let\u0026rsquo;s do final cleaning up.\nWe\u0026rsquo;ll start with Armature Tab - we can finally check off Names, In Front and Axes tab - animators don\u0026rsquo;t really need them and if they need to have controls in front, they\u0026rsquo;ll set them up.\nYour rig should look like this The last thing we should think about is locking up some transforms - I am generally against limiting animators choices, but there are some things we can do, to help animators in their work.\nWe\u0026rsquo;ll start with stretch controllers - while animator can use Transform (location), adding rotation or scale is only going to rotate the control, without any real consequences - we can lock it, so he can work with just pressing G to control the stretch. You can hold LMB and drag to lock more than one thing at a time After that lets think about our rotation control - we don\u0026rsquo;t really need the scale, so it should be locked. Rotation is the main thing so it should be open, but what about location? I\u0026rsquo;d say tha there are two schools when it comes to that. First school would lock it out (because the control isn\u0026rsquo;t to do that), but I believe it\u0026rsquo;s better to leave it open - animators are going to see if they would add a keyframe to the wrong controller and fix it themselves, but sometimes they might need to detach the translation to two different bones and this setup will let them. Sadly, it can break our squash \u0026amp; stretch - I\u0026rsquo;ll leave it to your call, but for my example I am not going to lock it.\nWhen it comes to cog, it\u0026rsquo;s the main control which animators are going to move the mesh with, so location and rotation should be open, as far as scale goes - I\u0026rsquo;m going to lock it to avoid bugs.\nAnd lastly the root control - of course location and rotation should be unlocked. As far as scale goes - with our setup (of making the hierarchy the same) user can easily scale the root to achieve bigger balls - as controls are going to scale too and the rig will work! Of course it\u0026rsquo;s not always the case with rigging and sometimes you\u0026rsquo;ll need to plan if a rig should be scalable or not and you\u0026rsquo;ll have to create the controls appropriately.\nWith that we\u0026rsquo;ve finally finished our rig! You can start learning animation right away with your own, self-rigged ball! Good luck in your animation journey and if you decide to share your ball animation, I\u0026rsquo;ll be happy to be tagged (@arahfx) to see what you created!\n6. Closing Thoughts # Congratulations on rigging your first, fully working ball rig! Now, you can start your animation journey by tackling bouncing ball exercises. Besides that we\u0026rsquo;ve now have idea on how to plan our controls and name them properly, which will be super handy later.\nAs you are probably as happy as me, I am not going to hold you any longer - after you master the ball, the animation world will be your oyster!\n","date":"15 February 2024","permalink":"/adamblogstuff/posts/squashstretch_blender/","section":"Posts","summary":"A step by step guide to build your first ball rig in blender","title":"Squash \u0026 Stretch Ball in blender"},{"content":"","date":"15 February 2024","permalink":"/adamblogstuff/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"15 February 2024","permalink":"/adamblogstuff/","section":"Techanimatically","summary":"","title":"Techanimatically"},{"content":"","date":"15 February 2024","permalink":"/adamblogstuff/tags/theory/","section":"Tags","summary":"","title":"theory"},{"content":"Our first rig - a squash \u0026amp; stretch ball # 0. Foreword # In this article you\u0026rsquo;ll learn:\nThe importance of ball exercises for learning animation Basic idea on what Ball Rig consist of Learn common slang for some controller types Understand what is happening in the code of \u0026ldquo;stretch\u0026rdquo; modifiers in popular programs 1. Why is ball important? # Whether you\u0026rsquo;re just starting your animation journey, study the craft, or you\u0026rsquo;re a seasoned animation veteran - the foundation of everything you know about animation starts with a ball.\nIf we take a cue at Richard William\u0026rsquo;s The Animator\u0026rsquo;s Survival Kit, the first chapter titled IT\u0026rsquo;S ALL IN THE TIMING AND THE SPACING - delves into how we use these two terms to understand the basics of any motion.\nI\u0026rsquo;ll never forget the image of this big Norwegian American sitting in the golden twilight, extending his long arms and spatula hands saying\u0026hellip; «The bouncing ball says it all»\n\u0026ndash;R. Williams \u0026ldquo;The Animators Survival Kit\u0026rdquo;\nThat\u0026rsquo;s why I want my first post to be dedicated to building a proper ball rig - a foundation upon one can explore basics of spacing, timing and squash \u0026amp; stretch principles. Additionally, we\u0026rsquo;ll peek under the hood of rigging mesh that can preserve it\u0026rsquo;s volume while being scaled.\nOf course, in 3D animation there are two main groups of users: Autodesk Maya and blender. I\u0026rsquo;ll try to explain the ideas in a software-agnostic manner. However, there will be chapters dedicated to one software, but I\u0026rsquo;m going to write every tutorial for both sofwares - ensuring noonoe feels left out.\nI\u0026rsquo;ll be using some scripts along the way, presented like this:\nExample - so you can install it yourself and follow along.\nFurthermore, I\u0026rsquo;ll include rigs created in the series - fully functional and suitable for use as foundational animation tutorials. They will be provided totally free of charge and licensed under GPL v3.0.\nIf you\u0026rsquo;re interested in delving into the technical aspects of animation, let\u0026rsquo;s get started!\n3. What is actually squash \u0026amp; stretch? # You\u0026rsquo;re probably familiar with the concept of squashing and stretching - it seems deceptively simple. When we squash a water balloon, the water inside pushes the sides, giving it a pancake-like appearance. Upon release, it springs back to its more natural shape, and if thrown - it stretches in the air before squashing upon impact.\nA balloon squashing on a face, courtesy of gifer.com Disney\u0026rsquo;s Nine Old Men identified squashing and stretching as one of the most crucial principles for creating visually appealing animation. It holds such significance that they designate dit as the the #1 principle in their 12 Principles of Animation. Understanding this principle is a cornerstone for today\u0026rsquo;s animators, whether they\u0026rsquo;re sketching frames or manipulating a complex humanoid body. Accounting for squash and stretch is essential to achieving the elusive illusion of life.\nThe mathematical explanation # Let\u0026rsquo;s start by eating the frog. In mathematical terms, we\u0026rsquo;ll consider a sphere with dimensions of x, y and z and a volume V1. We will then manipulate it by multiplying by n in one direction and by \\(\\frac{1}{\\sqrt{n}}\\) in the other directions. This manipulation aims to achieve a new volume V2 that emains equal to V1.\n\\(\\text{Volume} = x \\cdot y \\cdot z = n \\cdot y \\cdot \\left(\\frac{x}{\\sqrt{n}}\\right) \\cdot \\left(\\frac{z}{\\sqrt{n}}\\right)\\)\nWhere: x, y, z - our sphere transform values\nn - the amount of change along we add, in this case along Y axis\nRigging explanation # When it comes to rigging, achieving a volume preservation effect can be approached in various ways based on the intended use and desired outcome.\nThose of you who transition to animation from modelling, the first technique that may come to mind is the Lattice Deformer.\nLattice around the cube object in Object Mode - from blender official docs Lattice is a deformer present both in blender and Maya, commonly used for applying deformation. However, for our purposes where a deformation cage can be constrained and controlled, it might not be the most versatile method for creating mesh deformations. Despite encountering numerous YouTube tutorials utilizing such approach, I won\u0026rsquo;t be delving into this method in the upcoming ball rig tutorials.\nSquash deformer results - from Maya docs Second method, more aligned with the rigging tools themselves, involves using Stretch To Constraint (in blender)/ Squash Deformer (in Maya). These are off-the-shelf features that can significantly simplify construction of said mechanism in rigging. However, they might have limitations in more advanced setups.\nAs of version 4.0, blender hasn\u0026rsquo;t introduced rigging nodes yet, we\u0026rsquo;ll be utilizing Stretch To Constraint in the blender-specific tutorial. But how does it work under the hood?\nThe fundamental concept behind volume-preservating squash \u0026amp; stretch is joint scaling. When we stretch an object, it\u0026rsquo;s joint (or chain of joints) undergoes scaling. Of course when it squashes, the chain naturally scales too. This scaling can be applied uniformly along all axes - providing full-scaling of the rig or selectively along specific axes. To mimic the simultaneous change if onther axes, we can use the Volume ratio presented before.\nLet\u0026rsquo;s try this example.\nTo illustrate this, let\u0026rsquo;s assume we have an object whose transforms are (x, y, z).\nWe can stretch the bone by vector \\(\\vec{v}\\) = [0, 1, 0] resulting in new transform:\n(x, y+1, z)\nBy knowing the new value of y transform, we have our n.\nTo sell the effect of stretching, we need to scale the same object in other axes to achieve the same volume. To achieve that, we\u0026rsquo;ll use the formula I\u0026rsquo;ve written about before.\nWhen we scale object in y axis by n, we\u0026rsquo;ll multiply x and z scale by \\(\\frac{1}{\\sqrt{n}}\\) - to preserve the volume of the object.\nIn Maya\u0026rsquo;s Rigging Node Editor, it is possible to connect x, y and z direclty with multiplyDivide node, to multiply these channels accordingly. This method is going to achieve a good squash \u0026amp; stretch that is going to work on all type of bone chains - it\u0026rsquo;s extremly useful for humanoid skeleton rigs with cartoon features!\nSquash \u0026amp; Stretch in video games # Squash \u0026amp; Stretch isn\u0026rsquo;t something you\u0026rsquo;ll often encounter in videogames, at least now by default.\nUnreal Engine, for instance, doesn\u0026rsquo;t export scale of deformation bones at all! This might prompt one simple question - why bother?. The reason behind this decision is quite substantial. Achieving a good looking, volume-preserving squash \u0026amp; stretch of Skeletal Mesh entails calculating skinning deformations every frame, making it one of the most resource-hungry tasks for player\u0026rsquo;s CPU. While enabling bone scaling during mesh inport is an option to preserve these effects, it\u0026rsquo;s typically not the default setting due to performance problems. In many cases, this decision alligns with overall optimization strategies - it\u0026rsquo;s going to be used only when the game really depends on it.\nGiven the heavy optimization implications, there\u0026rsquo;are other techniques that might mimic the feeling of squashing and stretching in video games. These often include translations of the skeleton, mostly adjustments to arms and legs. Let\u0026rsquo;s consider jumping - by translating parts of skeleton one can achieve a stronger, more dynamic pose, for example by leaving the legs for a few frames on the ground longer only to squash them together (to their original position) nearing the apex of the jump loop. Such technique of translation can be observed in World of Warcraft\u0026rsquo;s Pandaren Jump.\nPandaren jump loop probably my favourite WoW animation These are just a few examples of the different tricks animators employ to create the illusion of life, even though it may not involve the real calculated volume-preserving squash \u0026amp; stretch. After all, the ultimate goal is to sell the viewer the best looking, lively performance withing the constraints of game performance.\n3. How does a ball rig work? # Mesh # For this example I\u0026rsquo;ll be using a mesh with a checker texture, that you can download:\nFor blender here For Maya here Skeleton # In it\u0026rsquo;s simplest form, a ball skeleton consists of just one bone, where joints (Maya) / head and tail of the bone (blender) are touching the sphere\u0026rsquo;s base and end. These hold whole skinning information, making it an ideal object to use automatic skinning options for.\nControls # Considering what animator might need to control in a ball rig, we might think of a few cases.\nFor blender I\u0026rsquo;m going to use Bone Widget to create control shapes.\nFor Maya, I\u0026rsquo;m are going to use IDR ControllerTools to do the same. Every rig, at the top of it\u0026rsquo;s hierarchy has to have a root. It\u0026rsquo;s purpose is to hold information about the default space of the rig. It\u0026rsquo;s often represented by a variation of circles with arrows on the ground.\nPossible shapes of root bones using Bone Widget The next in hierarchy, overarching rest of the controllers is a bone called cog - or sometimes stylized as c.o.g (abbreviation for center of gravity). These might get a lot different shapes depending of the center of gravity shape. The most popular ones are circles and saddles, for the purpose of ball rig, we\u0026rsquo;ll use a big circle.\nA Saddle-like shape for cog from Bone Widget The hierarchy of the rest of controllers might differ depending on circumstances. In case of our ball rig, we\u0026rsquo;ll have a few controllers following a cog. First of them will be a rotor - our second level controller. In this case rotor will be working the same as the cog - it\u0026rsquo;ll let animators translate or rotate a mesh (unless we lock it) and it\u0026rsquo;s main purpose will be to split rotation and translation to avoid clutter in the timeline and graph editor. We\u0026rsquo;ll use a smaller circle for this controller.\nThe last type of controllers for this rig is going to be an auxilary controller that will let animator control the squash and stretch of the mesh - preferably from the top and botton. There is no one way to imagine general shape of these controllers - their shape are going to refer to their function. In our case it\u0026rsquo;s going to be a control that might move up and down, so something with a pointy end might be a good idea. We\u0026rsquo;ll talk more about specific shapes in the next chapters.\n4. Closing Thoughts # We explored the concept of squash and stretch, delving into its significance and mechanics. Our discussion included its importance in animation and various ways to mimic it when necessary. Additionally, we laid down the foundational theory for building a functional ball rig.\nArmed with this knowledge, the upcoming articles will take a hands-on approach, applying the knowledge to create a working ball rig that you\u0026rsquo;ll be able to animate yourself. If you have any further questions of need assistance, dont hesitate to ask. Happy rigging!\n","date":"15 February 2024","permalink":"/adamblogstuff/posts/squashstretch/","section":"Posts","summary":"Overlook of squash \u0026amp; stretch mechanism building with with different rigging approaches","title":"Theory behind building a squash \u0026 stretch rig"},{"content":"Hey! I\u0026rsquo;m Adam. # I am an Animator / Rigger, based in Wrocław, Poland.\nCurrently, I am working at Far From Home where I am animating and rigging Forever Skies!\nWelcome to my blog, where I explore the art of rigging, gameplay animation and *technical animation. This blog serves as a blend of insights into rigging techniques, animation principles, scripting, and their application in the dynamic world of video games.\nBeyond discussion, my goal is to offer valuable tutorials and resources to aid you on your (and mine) journey through everything there is related to animation for video games. I\u0026rsquo;ll also try sprinkle in some thought-provoking book reviews and reflections on the broader animation industry. I believe in the power of animation as the ultimate storytelling medium in the entertainment industry. I\u0026rsquo;m excited to share my experiences and perspectives on every facet of this captivating medium.\nMy unique background encompasses both art (Graphic Design) and engineering (Computer Science), a blend that has propelled me into the specialized field of technical animation. Outside of my professional pursuits, I\u0026rsquo;m a reportage photographer, crafting digital photography books, a cinematography freak and an avid player of both digital and analog RPGs. I hope you\u0026rsquo;ll enjoy your time here!\nIf you have any questions or just want to chat - I am open to DMs at both my X and LinkedIn accounts that you can find on top :)\n","date":"11 February 2024","permalink":"/adamblogstuff/about/","section":"Techanimatically","summary":"T","title":"About"},{"content":"","date":"1 January 0001","permalink":"/adamblogstuff/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/adamblogstuff/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"Games I\u0026rsquo;ve been a part of # Forever Skies (PC, PS5) # Forever Skies - Animation \u0026amp; Rigging Forever Skies is the first project I am working on as an animator/rigger. I\u0026rsquo;ve been working mostly on third and first person animations, rigging and skinning of humanoids, non-humanoids and devices for Unreal Engine 4 and I\u0026rsquo;ve been helping in implementation of the animation system within the project.\nMy own projects # Rigs for Animation Students in blender \u0026amp; Maya # I\u0026rsquo;ve been working on bringing basic animation rigs like balls, pendulums, tails and walker animation rigs to help students with both learning how to rig these. On many Polish gamedev networking events I\u0026rsquo;ve noticed a lack of good quality basic rigs for blender and that\u0026rsquo;s why I wanted to give back to the community by making something that might work software independently (of course it\u0026rsquo;s not possible by doing it once, so I just rig \u0026amp; create tutorials for both softwares).\n","date":"1 January 0001","permalink":"/adamblogstuff/projects/","section":"Techanimatically","summary":"Games I\u0026rsquo;ve been a part of # Forever Skies (PC, PS5) # Forever Skies - Animation \u0026amp; Rigging Forever Skies is the first project I am working on as an animator/rigger.","title":"Projects"}]